# coding: utf-8

"""
    Multilogin X Profile Access Management API

    Multilogin X Profile Access Management API allows you to control everything related to permissions, workspaces, team members.

    The version of the OpenAPI document: 1.0.0
    Contact: support@multilogin.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class UnibeeAccountDetailsResponse(BaseModel):
    """
    UnibeeAccountDetailsResponse
    """ # noqa: E501
    address: Optional[StrictStr] = Field(default=None, description="address")
    billing_type: Optional[StrictInt] = Field(default=None, description="Billint type, 1-Recurring | 2-One-time")
    company_name: Optional[StrictStr] = Field(default=None, description="company name")
    country_code: Optional[StrictStr] = Field(default=None, description="country_code")
    country_name: Optional[StrictStr] = Field(default=None, description="country_name")
    create_time: Optional[StrictInt] = Field(default=None, description="create utc time")
    custom: Optional[StrictStr] = Field(default=None, description="custom")
    email: StrictStr = Field(description="email")
    external_user_id: Optional[StrictStr] = Field(default=None, description="external_user_id")
    first_name: Optional[StrictStr] = Field(default=None, description="first name")
    gateway_id: Optional[StrictInt] = Field(default=None, description="gateway_id")
    user_id: Optional[StrictInt] = Field(default=None, description="userId")
    language: Optional[StrictStr] = Field(default=None, description="User Language, en|ru|cn|vi|bp")
    last_name: Optional[StrictStr] = Field(default=None, description="last name")
    merchant_id: Optional[StrictInt] = Field(default=None, description="merchant_id")
    mobile: Optional[StrictStr] = Field(default=None, description="mobile")
    payment_method: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    recurring_amount: Optional[StrictInt] = Field(default=None, description="total recurring amount, cent")
    registration_number: Optional[StrictStr] = Field(default=None, description="RegistrationNumber")
    status: Optional[StrictInt] = Field(default=None, description="Status, 0-Active | 2-Suspend")
    subscription_id: Optional[StrictStr] = Field(default=None, description="subscription id")
    subscription_name: Optional[StrictStr] = Field(default=None, description="subscription name")
    subscription_status: Optional[StrictInt] = Field(default=None, description="Subscription status, 1-Pending ｜ 2-Active｜ 3-PendingInActive | 4-Cancel | 5-Expire | 6-Suspend| 7-Incomplete | 8-Processing | 9-Failed")
    tax_percentage: Optional[StrictInt] = Field(default=None, description="taxPercentage，1000 = 10%")
    timezone: Optional[StrictStr] = None
    type: Optional[StrictInt] = Field(default=None, description="User type, 1-Individual | 2-Organization")
    user_name: Optional[StrictStr] = None
    vat_number: Optional[StrictStr] = None
    version: Optional[StrictInt] = None
    is_mlx: Optional[StrictBool] = Field(default=None, description="Returns true if the user is registered in the MLX")
    __properties: ClassVar[List[str]] = ["address", "billing_type", "company_name", "country_code", "country_name", "create_time", "custom", "email", "external_user_id", "first_name", "gateway_id", "user_id", "language", "last_name", "merchant_id", "mobile", "payment_method", "phone", "recurring_amount", "registration_number", "status", "subscription_id", "subscription_name", "subscription_status", "tax_percentage", "timezone", "type", "user_name", "vat_number", "version", "is_mlx"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnibeeAccountDetailsResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnibeeAccountDetailsResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "address": obj.get("address"),
            "billing_type": obj.get("billing_type"),
            "company_name": obj.get("company_name"),
            "country_code": obj.get("country_code"),
            "country_name": obj.get("country_name"),
            "create_time": obj.get("create_time"),
            "custom": obj.get("custom"),
            "email": obj.get("email"),
            "external_user_id": obj.get("external_user_id"),
            "first_name": obj.get("first_name"),
            "gateway_id": obj.get("gateway_id"),
            "user_id": obj.get("user_id"),
            "language": obj.get("language"),
            "last_name": obj.get("last_name"),
            "merchant_id": obj.get("merchant_id"),
            "mobile": obj.get("mobile"),
            "payment_method": obj.get("payment_method"),
            "phone": obj.get("phone"),
            "recurring_amount": obj.get("recurring_amount"),
            "registration_number": obj.get("registration_number"),
            "status": obj.get("status"),
            "subscription_id": obj.get("subscription_id"),
            "subscription_name": obj.get("subscription_name"),
            "subscription_status": obj.get("subscription_status"),
            "tax_percentage": obj.get("tax_percentage"),
            "timezone": obj.get("timezone"),
            "type": obj.get("type"),
            "user_name": obj.get("user_name"),
            "vat_number": obj.get("vat_number"),
            "version": obj.get("version"),
            "is_mlx": obj.get("is_mlx")
        })
        return _obj


