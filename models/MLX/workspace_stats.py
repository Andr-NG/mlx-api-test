# coding: utf-8

"""
    Multilogin X Profile Access Management API

    Multilogin X Profile Access Management API allows you to control everything related to permissions, workspaces, team members.

    The version of the OpenAPI document: 1.0.0
    Contact: support@multilogin.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class WorkspaceStats(BaseModel):
    """
    WorkspaceStats
    """ # noqa: E501
    users_count: StrictInt = Field(description="Count of workspace users except owner")
    users_limit: StrictInt = Field(description="How many users workspace can hold according to the plan")
    profiles_local_count: StrictInt = Field(description="Count of created local profiles including trash-bin")
    profiles_cloud_count: StrictInt = Field(description="Count of created cloud profiles including trash-bin")
    profiles_local_limit: StrictInt = Field(description="How many local profiles workspace can hold according to the plan")
    profiles_cloud_limit: StrictInt = Field(description="How many cloud profiles workspace can hold according to the plan")
    active_profiles_count: Optional[StrictInt] = Field(default=None, description="Count of active profiles")
    active_profiles_limit: Optional[StrictInt] = Field(default=None, description="How many active profiles workspace can hold according to the plan")
    __properties: ClassVar[List[str]] = ["users_count", "users_limit", "profiles_local_count", "profiles_cloud_count", "profiles_local_limit", "profiles_cloud_limit", "active_profiles_count", "active_profiles_limit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkspaceStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkspaceStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "users_count": obj.get("users_count"),
            "users_limit": obj.get("users_limit"),
            "profiles_local_count": obj.get("profiles_local_count"),
            "profiles_cloud_count": obj.get("profiles_cloud_count"),
            "profiles_local_limit": obj.get("profiles_local_limit"),
            "profiles_cloud_limit": obj.get("profiles_cloud_limit"),
            "active_profiles_count": obj.get("active_profiles_count"),
            "active_profiles_limit": obj.get("active_profiles_limit")
        })
        return _obj


