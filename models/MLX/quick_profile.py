# coding: utf-8

"""
    Multilogin X Launcher API

    Launcher API is used to work with profiles in the browser (start, stop, get statuses).

    The version of the OpenAPI document: 1.0.0
    Contact: support@multilogin.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from models.MLX.browser_type import BrowserType
from models.MLX.proxy import Proxy
from models.MLX.quick_profile_meta_params import QuickProfileMetaParams
from models.MLX.script_parameter import ScriptParameter
from typing import Optional, Set
from typing_extensions import Self

class QuickProfile(BaseModel):
    """
    QuickProfile
    """ # noqa: E501
    browser_type: BrowserType
    core_version: Optional[StrictInt] = None
    os_type: StrictStr
    automation: Optional[StrictStr] = None
    is_headless: Optional[StrictBool] = None
    proxy: Optional[Proxy] = None
    parameters: QuickProfileMetaParams
    script_file: Optional[StrictStr] = Field(default=None, description="Script file name with extension relative to the scripts folder")
    script_params: Optional[List[ScriptParameter]] = Field(default=None, description="Script parameters")
    __properties: ClassVar[List[str]] = ["browser_type", "core_version", "os_type", "automation", "is_headless", "proxy", "parameters", "script_file", "script_params"]

    @field_validator('os_type')
    def os_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['linux', 'macos', 'windows', 'android']):
            raise ValueError("must be one of enum values ('linux', 'macos', 'windows', 'android')")
        return value

    @field_validator('automation')
    def automation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['selenium', 'puppeteer']):
            raise ValueError("must be one of enum values ('selenium', 'puppeteer')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuickProfile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of proxy
        if self.proxy:
            _dict['proxy'] = self.proxy.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parameters
        if self.parameters:
            _dict['parameters'] = self.parameters.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in script_params (list)
        _items = []
        if self.script_params:
            for _item_script_params in self.script_params:
                if _item_script_params:
                    _items.append(_item_script_params.to_dict())
            _dict['script_params'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuickProfile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "browser_type": obj.get("browser_type"),
            "core_version": obj.get("core_version"),
            "os_type": obj.get("os_type"),
            "automation": obj.get("automation"),
            "is_headless": obj.get("is_headless"),
            "proxy": Proxy.from_dict(obj["proxy"]) if obj.get("proxy") is not None else None,
            "parameters": QuickProfileMetaParams.from_dict(obj["parameters"]) if obj.get("parameters") is not None else None,
            "script_file": obj.get("script_file"),
            "script_params": [ScriptParameter.from_dict(_item) for _item in obj["script_params"]] if obj.get("script_params") is not None else None
        })
        return _obj


